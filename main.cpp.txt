#include <SDL2/SDL.h>
#include <GL\glut.h>

#include <cstdlib>
#define LARGEUR_BASE 50
#define HAUTEUR_BASE 20
#define LARGEUR_BRAS_1 150
#define HAUTEUR_BRAS_1 15
#define LARGEUR_BRAS_2 50
#define HAUTEUR_BRAS_2 10
#define TAILLE_CAISSE 10
#define LARGEUR_ECRAN (LARGEUR_BASE + LARGEUR_BRAS_1 + HAUTEUR_BRAS_2 + 50)
#define HAUTEUR_ECRAN (HAUTEUR_BASE + LARGEUR_BRAS_1 + HAUTEUR_BRAS_2 + 50)
int angle1 = 45;
int angle2 = -20;
int longueur = 50;
void Dessiner(SDL_Window*& window);
int main(int argc, char *argv[])
{
    SDL_Event event;
    SDL_Init(SDL_INIT_VIDEO);
    atexit(SDL_Quit);
	SDL_Window *window = SDL_CreateWindow("SDL2/OpenGL Demo", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 480, SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);

	// Create an OpenGL context associated with the window.
	SDL_GLContext glContext = SDL_GL_CreateContext(window);
	glutInitDisplayMode(GLUT_RGBA | GLUT_SINGLE | GLUT_ALPHA | GLUT_DEPTH|GLUT_STENCIL);
    glMatrixMode( GL_PROJECTION );
    glLoadIdentity( );
    gluOrtho2D(0,LARGEUR_ECRAN,0,HAUTEUR_ECRAN);
    //SDL_EnableKeyRepeat(10,10);
    Dessiner(window);
    while(SDL_WaitEvent(&event))
    {
        switch(event.type)
        {
            case SDL_QUIT:
            exit(0);
            break;
            case SDL_KEYDOWN:
            switch (event.key.keysym.sym)
            {
                case SDLK_UP:
                longueur --;
                if (longueur < 10)
                    longueur = 10;
                break;
                case SDLK_DOWN:
                longueur ++;
                if (longueur > 100)
                    longueur = 100;
                break;
                case SDLK_LEFT:
                if ((event.key.keysym.mod & KMOD_LSHIFT) == KMOD_LSHIFT)
                {
                    angle1++;
                    if (angle1 > 90)
                        angle1 = 90;
                }
                else
                {
                    angle2++;
                    if (angle2 > 90)
                        angle2 = 90;
                }
                break;
                case SDLK_RIGHT:
                if ((event.key.keysym.mod & KMOD_LSHIFT) == KMOD_LSHIFT)
                {
                    angle1--;
                    if (angle1 < 10)
                        angle1 = 10;
                }
                else
                {
                    angle2--;
                    if (angle2 < -90)
                        angle2 = -90;
                }
                break;
            }
            break;
        }
        Dessiner(window);
    }
    return 0;
}
/*
    Dessine un rectangle avec comme point de référence
    le milieu du côté gauche
*/
void dessineRectangle(double largeur,double hauteur)
{
    glBegin(GL_QUADS);
    glVertex2d(0,-hauteur/2);
    glVertex2d(0,hauteur/2);
    glVertex2d(largeur,hauteur/2);
    glVertex2d(largeur,-hauteur/2);
    glEnd();
}
/*
    Dessine le repère actuel pour faciliter
    la compréhension des transformations.
    Utiliser "echelle" pour avoir un repère bien orienté et positionné
    mais avec une échelle différente.
*/
void dessinerRepere(unsigned int echelle = 1)
{
    glPushMatrix();
    glScalef(echelle,echelle,echelle);
    glBegin(GL_LINES);
    glColor3ub(0,0,255);
    glVertex2i(0,0);
    glVertex2i(1,0);
    glColor3ub(0,255,0);
    glVertex2i(0,0);
    glVertex2i(0,1);
    glEnd();
    glPopMatrix();
}
void Dessiner(SDL_Window*& window)
{
	glClear( GL_COLOR_BUFFER_BIT );

	glMatrixMode( GL_MODELVIEW );
	glLoadIdentity( );

	glTranslated(LARGEUR_BASE/2,HAUTEUR_BASE,0);
	glColor3ub(254,128,1);
	//glTranslatef(LARGEUR_ECRAN * 0.1, HAUTEUR_ECRAN * 0.1, 0);
	dessineRectangle(LARGEUR_BASE, HAUTEUR_BASE);
	
	glColor3ub(0,0,200);
	glTranslatef(LARGEUR_BASE / 2, HAUTEUR_BASE / 2, 0);
	glRotatef(angle1, 0, 0, 1);
	dessineRectangle(LARGEUR_BRAS_1, HAUTEUR_BRAS_1);

	glColor3ub(0,200,21);
	glTranslatef(LARGEUR_BRAS_1, 0, 0);
	glRotatef(angle2, 0, 0, 1);
	dessineRectangle(LARGEUR_BRAS_2, HAUTEUR_BRAS_2);
	
	glColor3ub(255, 05, 05);
	glTranslatef(LARGEUR_BRAS_2, 0, 0);
	glRotatef(0, 0, 0, 1);
	glBegin(GL_LINES);
		glVertex2d(0, 0);
		glVertex2d(longueur, 0);
	glEnd();

	/*glColor3ub(255, 05, 05);
	glTranslatef(LARGEUR_BRAS_2, 0, 0);
	glRotatef(-angle2 - angle1, 0, 0, 1);
	glBegin(GL_LINES);
		glVertex2d(0, 0);
		glVertex2d(0, -longueur);
	glEnd();
	
	glColor3ub(254,255,255);
	glTranslatef(-TAILLE_CAISSE / 2, -longueur, 0);
	dessineRectangle(TAILLE_CAISSE, TAILLE_CAISSE);*/

/*	glTranslated(LARGEUR_BASE/2,HAUTEUR_BASE,0);
    glColor3ub(254,128,1);
    dessineRectangle(LARGEUR_BASE,HAUTEUR_BASE);

    glTranslated(LARGEUR_BASE/2,HAUTEUR_BASE/2,0);
    glRotated(angle1,0,0,1);
    glColor3ub(248,230,7);
    dessineRectangle(LARGEUR_BRAS_1,HAUTEUR_BRAS_1);

    glTranslated(LARGEUR_BRAS_1,0,0);
    // Puis m'occupe du petit bras
    glRotated(angle2,0,0,1);
    glColor3ub(186,234,21);
    dessineRectangle(LARGEUR_BRAS_2,HAUTEUR_BRAS_2);
    // Je me place au bout du petit bras
    glTranslated(LARGEUR_BRAS_2,0,0);

    glRotated(-angle1-angle2,0,0,1);
    // Je dessine le fil
    glColor3ub(255,255,255);
    glBegin(GL_LINES);
    glVertex2i(0,0);
    glVertex2i(0,-longueur);
    glEnd();
    glTranslated(-TAILLE_CAISSE/2,-longueur,0);
    // Et je dessine enfin la caisse
    glColor3ub(175,175,85);
    dessineRectangle(TAILLE_CAISSE,TAILLE_CAISSE);
	*/
    glFlush();
    SDL_GL_SwapWindow(window);
}
/*
void		handleEvent(bool& continuer, SDL_Event& ev)
{
	SDL_WaitEvent(&ev);
	switch(ev.type)
	{
		case SDL_QUIT:
			continuer = false;
	}
}

void		draw(SDL_Window*& window )
{
	glClearColor(0, 0, 0, 1);
	glClear(GL_COLOR_BUFFER_BIT);

	glMatrixMode( GL_MODELVIEW );
	glLoadIdentity( );

	glPushMatrix();
	glTranslatef(0.2f, 0.0f, 0.0f);
	glBegin(GL_POLYGON);
		glColor3ub(255, 0, 0);	glVertex2d(-0.75, -0.75);	//ub = unsigned bit
		glColor3ub(0, 255, 0);	glVertex2d(0, 0.75);
		glColor3ub(0, 0, 255);	glVertex2d(0.75, -0.75);
	glEnd();
	glPopMatrix();
	
	glBegin(GL_QUADS);
		glColor3ub(0,0,255);
		glVertex2d(-0.75,-0.75);
		glVertex2d(-0.75,0.75);
		glColor3ub(255,0,0);
		glVertex2d(0.75,0.75);
		glVertex2d(0.75,-0.75);
	glEnd();

	glFlush();
	SDL_GL_SwapWindow(window);
}

void		clean(SDL_GLContext& glContext)
{
	SDL_Quit();
	SDL_GL_DeleteContext(glContext);
}

int main(int argc, char *argv[])
{
	SDL_Init(SDL_INIT_EVERYTHING);
 
	SDL_GL_SetAttribute(SDL_GL_RED_SIZE,            0);
	SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE,          0);
	SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,           0);
	SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE,          0);
	SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE,          24); //mettre 16 si ce ne fonctionne pas
	SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE,        8);
	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER,        1);*/
 
    /*glEnable(GL_DEPTH_TEST);
    glClearDepth(1);
	// Window mode MUST include SDL_WINDOW_OPENGL for use with OpenGL.
	SDL_Window *window = SDL_CreateWindow("SDL2/OpenGL Demo", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 480, SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);

	// Create an OpenGL context associated with the window.
	SDL_GLContext glContext = SDL_GL_CreateContext(window);
	glutInitDisplayMode(GLUT_RGBA | GLUT_SINGLE | GLUT_ALPHA | GLUT_DEPTH|GLUT_STENCIL);

	// now you can make GL calls.
	// Once finished with OpenGL functions, the SDL_GLContext can be deleted.

	bool continuer = true;
	SDL_Event ev;
	
	//update
	while (continuer)
	{
		handleEvent(continuer, ev);
		draw(window);
	}

	clean(glContext);

	return 0;
}*/